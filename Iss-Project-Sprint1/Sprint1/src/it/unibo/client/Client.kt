/* Generated by AN DISI Unibo */ 
package it.unibo.client

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Client ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var CLIENTDONE  = 0
				var SLOTNUM 	= 0 //slot assegnato
				var TOKENID 	= "0"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Client mock simulation START | CLIENT")
						stateTimer = TimerActor("timer_s0", 
							scope, context!!, "local_tout_client_s0", 4000.toLong() )
					}
					 transition(edgeName="t00",targetState="requestToEnter",cond=whenTimeout("local_tout_client_s0"))   
				}	 
				state("init") { //this:State
					action { //it:State
					}
				}	 
				state("requestToEnter") { //this:State
					action { //it:State
						 var t = kotlin.random.Random.nextLong(2000,4000)  
						 delay(t)  
						println("client notify his interest in entering | CLIENT")
						request("reqenter", "reqenter(client)" ,"parkingmanagerservice" )  
					}
					 transition(edgeName="t01",targetState="noImmediatlyEntry",cond=whenReply("waitIndoor"))
					transition(edgeName="t02",targetState="cartoindoor",cond=whenReply("enter"))
				}	 
				state("noImmediatlyEntry") { //this:State
					action { //it:State
						delay(3000) 
					}
					 transition( edgeName="goto",targetState="cartoindoor", cond=doswitch() )
				}	 
				state("cartoindoor") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("enter(SLOTNUM)"), Term.createTerm("enter(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 SLOTNUM = payloadArg(0).toInt()  
								if(  SLOTNUM > 0  
								 ){println("SLOTNUM = $SLOTNUM . Moving car to Indoor | CLIENT")
								request("carenter", "carenter(V)" ,"parkingmanagerservice" )  
								}
						}
					}
					 transition(edgeName="t03",targetState="afterreceipt",cond=whenReply("receipt"))
				}	 
				state("afterreceipt") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("receipt(TOKENID)"), Term.createTerm("receipt(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TOKENID = payloadArg(0)  
								updateResourceRep( "TOKENID"  
								)
								println("client's TOKENID is $TOKENID | CLIENT")
								 var t1 = kotlin.random.Random.nextLong(3000, 6000)
											 delay(15000)  
						}
					}
					 transition( edgeName="goto",targetState="reqpickup", cond=doswitch() )
				}	 
				state("reqpickup") { //this:State
					action { //it:State
						println("client notify his interest in picking his car | CLIENT")
						request("pickup", "pickup($TOKENID)" ,"parkingmanagerservice" )  
					}
					 transition(edgeName="t04",targetState="waitingForCar",cond=whenReply("pickupaccepted"))
				}	 
				state("waitingForCar") { //this:State
					action { //it:State
					}
					 transition(edgeName="t05",targetState="pickupcar",cond=whenDispatch("pickup"))
				}	 
				state("pickupcar") { //this:State
					action { //it:State
						delay(3000) 
						emit("carwithdrawn", "cw(bye)" ) 
						 CLIENTDONE = CLIENTDONE + 1  
					}
					 transition( edgeName="goto",targetState="stop", cond=doswitchGuarded({ CLIENTDONE == 4  
					}) )
					transition( edgeName="goto",targetState="requestToEnter", cond=doswitchGuarded({! ( CLIENTDONE == 4  
					) }) )
				}	 
				state("stop") { //this:State
					action { //it:State
						println("No more clients")
					}
				}	 
			}
		}
}
