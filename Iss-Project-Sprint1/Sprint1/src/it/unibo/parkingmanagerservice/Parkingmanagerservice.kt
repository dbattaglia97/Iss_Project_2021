/* Generated by AN DISI Unibo */ 
package it.unibo.parkingmanagerservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkingmanagerservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		lateinit var testUpdaterActor	: ActorBasic
			var prog= 0
			var SLOTNUM=-1
			var CARSLOTNUM=-1
			var TOKENIN= -1
			var boolIN=false
			var boolOUT=false
			var weightCheck=""
			var atHome=false 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('parkingAreaKb.pl')","") //set resVar	
						println("Park System START | SERVICE")
						testUpdaterActor= sysUtil.getActor("testupdater")!! 
						forward("startsonar", "sonar(ON)" ,"sonarhandler" ) 
						forward("startweightsensor", "sensor(ON)" ,"weightsensorhandler" ) 
						stateTimer = TimerActor("timer_s0", 
							scope, context!!, "local_tout_parkingmanagerservice_s0", 1000.toLong() )
					}
					 transition(edgeName="t017",targetState="checkAcceptIN",cond=whenTimeout("local_tout_parkingmanagerservice_s0"))   
				}	 
				state("checkAcceptIN") { //this:State
					action { //it:State
						println("Checking if an AcceptIN can be elaborated| SERVICE")
						solve("availableParking","") //set resVar	
						if( currentSolution.isSuccess() ) {boolIN=true 
						}
						else
						{boolIN=false 
						}
					}
					 transition( edgeName="goto",targetState="checkOutdoor", cond=doswitchGuarded({boolIN==true 
					}) )
					transition( edgeName="goto",targetState="checkOnlyOutdoor", cond=doswitchGuarded({! (boolIN==true 
					) }) )
				}	 
				state("checkOutdoor") { //this:State
					action { //it:State
						println("Checking if an AcceptOut can be elaborated| SERVICE")
						solve("acceptOUT","") //set resVar	
						if( currentSolution.isSuccess() ) {boolOUT=true 
						}
						else
						{boolOUT=false 
						}
					}
					 transition( edgeName="goto",targetState="allReady", cond=doswitchGuarded({boolOUT==true 
					}) )
					transition( edgeName="goto",targetState="indoorOnlyReady", cond=doswitchGuarded({! (boolOUT==true 
					) }) )
				}	 
				state("checkOnlyOutdoor") { //this:State
					action { //it:State
						println("Checking if an AcceptOut can be elaborated| SERVICE")
						solve("acceptOUT","") //set resVar	
						if( currentSolution.isSuccess() ) {boolOUT=true 
						}
						else
						{boolOUT=false 
						}
					}
					 transition( edgeName="goto",targetState="outdoorOnlyReady", cond=doswitchGuarded({boolOUT==true 
					}) )
					transition( edgeName="goto",targetState="waiting", cond=doswitchGuarded({! (boolOUT==true 
					) }) )
				}	 
				state("indoorOnlyReady") { //this:State
					action { //it:State
						println("The system can only elaborate AcceptIN request| SERVICE")
						boolOUT=false
						        boolIN=false  
						stateTimer = TimerActor("timer_indoorOnlyReady", 
							scope, context!!, "local_tout_parkingmanagerservice_indoorOnlyReady", 10000.toLong() )
					}
					 transition(edgeName="t018",targetState="moveToHome",cond=whenTimeout("local_tout_parkingmanagerservice_indoorOnlyReady"))   
					transition(edgeName="t019",targetState="acceptin",cond=whenRequest("reqenter"))
				}	 
				state("outdoorOnlyReady") { //this:State
					action { //it:State
						println("The system can only elaborate AcceptOUT request| SERVICE")
						boolOUT=false
						        boolIN=false  
						stateTimer = TimerActor("timer_outdoorOnlyReady", 
							scope, context!!, "local_tout_parkingmanagerservice_outdoorOnlyReady", 10000.toLong() )
					}
					 transition(edgeName="t020",targetState="moveToHome",cond=whenTimeout("local_tout_parkingmanagerservice_outdoorOnlyReady"))   
					transition(edgeName="t021",targetState="acceptout",cond=whenRequest("pickup"))
				}	 
				state("waiting") { //this:State
					action { //it:State
						println("The system can't elaborate any request| SERVICE")
						stateTimer = TimerActor("timer_waiting", 
							scope, context!!, "local_tout_parkingmanagerservice_waiting", 5000.toLong() )
					}
					 transition(edgeName="t022",targetState="moveToHome",cond=whenTimeout("local_tout_parkingmanagerservice_waiting"))   
				}	 
				state("moveToHome") { //this:State
					action { //it:State
						if(!atHome){ 
						println("Sending command in order to send trolley to HOME | SERVICE")
						forward("updateForTesting", "toHome(V)" ,"testupdater" ) 
						}
							        atHome=true 
					}
					 transition( edgeName="goto",targetState="checkAcceptIN", cond=doswitch() )
				}	 
				state("allReady") { //this:State
					action { //it:State
						println("The system can elaborate AcceptIN and AcceptOut requests| SERVICE")
					}
					 transition(edgeName="t023",targetState="acceptin",cond=whenRequest("reqenter"))
					transition(edgeName="t024",targetState="acceptout",cond=whenRequest("pickup"))
				}	 
				state("acceptin") { //this:State
					action { //it:State
						println("The system is elaborating an AcceptIN request| SERVICE")
						solve("availableParking","") //set resVar	
						if( currentSolution.isSuccess() ) {solve("slotFree(S)","") //set resVar	
						 SLOTNUM = getCurSol("S").toString().toInt() 
						}
						else
						{SLOTNUM=0 
						}
						solve("indoorfree","") //set resVar	
						if( currentSolution.isSuccess() ) {forward("updateForTesting", "slotnum($SLOTNUM)" ,"testupdater" ) 
						println("Reply to reqenter with $SLOTNUM  | SERVICE")
						answer("reqenter", "enter", "enter($SLOTNUM)"   )  
						}
						else
						{forward("updateForTesting", "slotnum($SLOTNUM)" ,"testupdater" ) 
						println("Reply to reqenter with waitIndoor($SLOTNUM)  | SERVICE")
						answer("reqenter", "enter", "waitIndoor($SLOTNUM)"   )  
						}
					}
					 transition( edgeName="goto",targetState="moveToIn", cond=doswitchGuarded({SLOTNUM!=0 
					}) )
					transition( edgeName="goto",targetState="moveToHome", cond=doswitchGuarded({! (SLOTNUM!=0 
					) }) )
				}	 
				state("moveToIn") { //this:State
					action { //it:State
						atHome=false 
						println("Trolley is moving to Indoor")
					}
					 transition(edgeName="t025",targetState="carenter",cond=whenRequest("carenter"))
				}	 
				state("carenter") { //this:State
					action { //it:State
						println("The system is elaborating a carenter request| SERVICE")
						 prog++ 
						println("carindoorarrival emitted in order to be processed by  WEIGHT SENSOR   | SERVICE")
						emit("carindoorarrival", "cia(car_arrived)" ) 
					}
					 transition(edgeName="t026",targetState="weightCheck",cond=whenDispatch("weightcheck"))
				}	 
				state("weightCheck") { //this:State
					action { //it:State
						println("The system is checking if there is a car in the indoorArea| SERVICE")
						if( checkMsgContent( Term.createTerm("wc(V)"), Term.createTerm("wc(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								weightCheck = payloadArg(0).toString()
												println("Weight check: " + weightCheck) 
						}
					}
					 transition( edgeName="goto",targetState="receipt", cond=doswitchGuarded({weightCheck.equals("OK") 
					}) )
					transition( edgeName="goto",targetState="weightNotOK", cond=doswitchGuarded({! (weightCheck.equals("OK") 
					) }) )
				}	 
				state("weightNotOK") { //this:State
					action { //it:State
						println("There isn't a car in the indoor")
					}
					 transition( edgeName="goto",targetState="moveToHome", cond=doswitch() )
				}	 
				state("receipt") { //this:State
					action { //it:State
						 var TOKENID = "$prog$SLOTNUM" 
						solve("addToken($TOKENID)","") //set resVar	
						println("REPLY TO CARENTER WITH RECEIPT $TOKENID | SERVICE")
						answer("carenter", "receipt", "receipt($TOKENID)"   )  
						forward("updateForTesting", "receipt($TOKENID)" ,"testupdater" ) 
						stateTimer = TimerActor("timer_receipt", 
							scope, context!!, "local_tout_parkingmanagerservice_receipt", 1000.toLong() )
					}
					 transition(edgeName="t027",targetState="moveToSlotIn",cond=whenTimeout("local_tout_parkingmanagerservice_receipt"))   
				}	 
				state("moveToSlotIn") { //this:State
					action { //it:State
						solve("freedindoor","") //set resVar	
						println("SLOTNUM IS $SLOTNUM")
						solve("occupySlot($SLOTNUM)","") //set resVar	
						atHome=false 
						println("Trolley moves from entrance to slot $SLOTNUM | SERVICE")
						stateTimer = TimerActor("timer_moveToSlotIn", 
							scope, context!!, "local_tout_parkingmanagerservice_moveToSlotIn", 4000.toLong() )
					}
					 transition(edgeName="t028",targetState="checkAcceptIN",cond=whenTimeout("local_tout_parkingmanagerservice_moveToSlotIn"))   
				}	 
				state("acceptout") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("pickup(V)"), Term.createTerm("pickup(TOKENIN)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TOKENIN = payloadArg(0).toInt()  
								println("Token provided by the customer for the pickup $TOKENIN | SERVICE")
								solve("token($TOKENIN)","") //set resVar	
								if( currentSolution.isSuccess() ) {answer("pickup", "pickupaccepted", "pickupaccepted($TOKENIN)"   )  
								CARSLOTNUM= TOKENIN%10 
								println("Token elaboration OK, token= $TOKENIN and corresponding slot= $CARSLOTNUM| SERVICE")
								forward("updateForTesting", "pickup($CARSLOTNUM)" ,"testupdater" ) 
								}
								else
								{answer("pickup", "pickupaccepted", "pickupaccepted($TOKENIN)"   )  
								TOKENIN=-1 
								println("TOKEN NOT OK | SERVICE")
								}
						}
					}
					 transition( edgeName="goto",targetState="picking", cond=doswitchGuarded({TOKENIN>0 
					}) )
					transition( edgeName="goto",targetState="tokenError", cond=doswitchGuarded({! (TOKENIN>0 
					) }) )
				}	 
				state("tokenError") { //this:State
					action { //it:State
						println("TOKEN ERROR | SERVICE")
					}
					 transition( edgeName="goto",targetState="checkAcceptIN", cond=doswitch() )
				}	 
				state("picking") { //this:State
					action { //it:State
						println("Trolley is picking a car | SERVICE")
						atHome= false 
						println("Trolley picking car from slot $CARSLOTNUM result from $TOKENIN % 10 | SERVICE")
						delay(3000) 
						solve("vacateSlot($CARSLOTNUM)","") //set resVar	
						solve("removeToken($TOKENIN)","") //set resVar	
						println("Car is in Outdoor area | SERVICE")
						emit("caroutdoorarrival", "coa(car_outdoor)" ) 
						forward("pickup", "pickup(OK)" ,"client" ) 
					}
					 transition(edgeName="t029",targetState="withdrawn",cond=whenDispatch("withdrawn"))
					transition(edgeName="t030",targetState="timeout",cond=whenEvent("timeout"))
				}	 
				state("withdrawn") { //this:State
					action { //it:State
						println("Car withdrawn!")
					}
					 transition( edgeName="goto",targetState="checkAcceptIN", cond=doswitch() )
				}	 
				state("timeout") { //this:State
					action { //it:State
						println("%%%% TIMEOUT %%%%")
						emit("alarm", "timeout(alarm)" ) 
					}
				}	 
			}
		}
}
