/* Generated by AN DISI Unibo */ 
package it.unibo.sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var simulate = false
		   lateinit var firstActorInPipe : ActorBasic 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("sonar START")
						discardMessages = true
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('sonaronrasp.pl')","") //set resVar	
						solve("showSystemConfiguration","") //set resVar	
						  firstActorInPipe           = sysUtil.getActor("sonardatasource")!!  //generates REAL data
						 			firstActorInPipe.
										subscribeLocalActor("datacleaner"). 		//removes 'wrong' data''
										subscribeLocalActor("datalogger").		    //logs (shows) the data generated by the sonar
						  				subscribeLocalActor("sonar").				//handles sonarrobot but does not propagate ...
						 				//subscribeLocalActor("distancefilter").		//propagates the lcoal stream event obstacle
						  				subscribeLocalActor( "sonar")  
						forward("sonarstart", "sonarstart(ok)" ,"sonardatasource" ) 
						delay(5000) 
					}
					 transition(edgeName="t00",targetState="sendSonarData",cond=whenEvent("sonar"))
				}	 
				state("sendSonarData") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("distance(V)"), Term.createTerm("distance(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val D = payloadArg(0)  
								emit("sonaroutdoor", "distance($D)" ) 
						}
					}
					 transition(edgeName="t01",targetState="sendSonarData",cond=whenEvent("sonar"))
				}	 
			}
		}
}
