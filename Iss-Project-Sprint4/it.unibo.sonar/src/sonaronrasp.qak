/*
 * ----------------------------------------------------------------------
 * RUNS ON Raspberry
 *
 * - loads the kb about the system (sonar2021Kb.pl) and showSystemConfiguration
 * - loads the sonar2021ConfigKb.pl and reads the sonar-data source (real or simulated).
 *   	If real, activates the CodedQActor sonardatasource of class sonarHCSR04Support2021
 *   	If simulated, activates the CodedQActor sonarsimulator of class sonarsimulator
 * - setup the sonar-data pipe that emits-on-stream the event sonar:distance( V )
 * - handles the event sonar and emits the event sonarrobot:sonar( D )
 * 
 * TO INTERACT from Rasp to PC without MQTT => 
 *            remove Windows firewall or allow port 8028
 * ----------------------------------------------------------------------
 */


 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io 
	//"tcp://broker.hivemq.com" 

System -msglog  sonaronrasp   
mqttBroker "broker.hivemq.com" : 1883 eventTopic "parkingArea/feedback"


Dispatch sonarstart      : sonarstart(V)  
Dispatch simulatorstart  : simulator(V)  
Event    sonar           : distance( V )   //emitted by rx.sonarSimulator or sensors.sonarHCSR04SupportActor	
Event    sonaroutdoor    : distance( V )      //for the application level
 
Context ctxsonaronrasp   ip [host="localhost"  port=8028   ]
  
CodedQActor sonarsimulator  context ctxsonaronrasp className "sonarSimulator"  
CodedQActor sonardatasource context ctxsonaronrasp className "sonarHCSR04Support2021"

//Filters
CodedQActor datalogger     context ctxsonaronrasp className "dataLogger"
CodedQActor datacleaner    context ctxsonaronrasp className "dataCleaner"
//CodedQActor distancefilter context ctxsonaronrasp className "distanceFilter"
 
  
QActor sonar context ctxsonaronrasp {     
[# var simulate = false
   lateinit var firstActorInPipe : ActorBasic 
#]
 	State s0 initial {  		 
 		println("sonar START")
 		discardMsg On	
 		
 		//INTROSPECTION
 	 	
 		 // "solve" significa è vero che ... 
 		solve( consult("sysRules.pl")	 )
 		solve( consult("sonaronrasp.pl")       )
 		solve( showSystemConfiguration   ) //è una regola, la troviamo nelle sysRules

		//CREATE THE PIPE
		[#  firstActorInPipe           = sysUtil.getActor("sonardatasource")!!  //generates REAL data
 			firstActorInPipe.
				subscribeLocalActor("datacleaner"). 		//removes 'wrong' data''
				subscribeLocalActor("datalogger").		    //logs (shows) the data generated by the sonar
  				subscribeLocalActor("sonar").				//handles sonarrobot but does not propagate ...
 				//subscribeLocalActor("distancefilter").		//propagates the lcoal stream event obstacle
  				subscribeLocalActor( "sonar")  
		#]    
  
 		//ACTIVATE THE DATA SOURCE (REAL or SIMULATED)
		forward sonardatasource -m sonarstart : sonarstart(ok)  //payload doesn't care
	
	delay 5000
  	}  
  	Transition t0  whenEvent sonar -> sendSonarData  
			 		  
  	State sendSonarData{
  		printCurrentMessage
  		 onMsg( sonar : distance(D) ){ 
  		 	[# val D = payloadArg(0) #] 
  		 	emit sonaroutdoor : distance($D)
  		 	}
  	}
   	Transition t0 whenEvent sonar -> sendSonarData
 }
