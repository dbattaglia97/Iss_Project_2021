/* Generated by AN DISI Unibo */ 
package it.unibo.timer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Timer ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
				state("working") { //this:State
					action { //it:State
					}
					 transition(edgeName="t04",targetState="startTimer",cond=whenDispatch("starttimer"))
				}	 
				state("startTimer") { //this:State
					action { //it:State
						println("Sonar startTimer")
						delay(2000) 
						stateTimer = TimerActor("timer_startTimer", 
							scope, context!!, "local_tout_timer_startTimer", 20000.toLong() )
					}
					 transition(edgeName="t05",targetState="timeout",cond=whenTimeout("local_tout_timer_startTimer"))   
					transition(edgeName="t06",targetState="stopTimer",cond=whenDispatch("stoptimer"))
				}	 
				state("stopTimer") { //this:State
					action { //it:State
						println("Sonar stopTimer")
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
				state("timeout") { //this:State
					action { //it:State
						println("Sonar timeout")
						forward("updateGui", "alarm(TIMEOUT)" ,"guiupdater" ) 
					}
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
			}
		}
}
