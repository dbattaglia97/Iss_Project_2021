/* Generated by AN DISI Unibo */ 
package it.unibo.fan

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fan ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("fan | start")
					}
					 transition(edgeName="t042",targetState="working",cond=whenDispatch("startfan"))
				}	 
				state("working") { //this:State
					action { //it:State
						println("Fan working | FAN")
						emit("decrease", "decrease(V)" ) 
						delay(1000) 
						forward("updateGui", "fan(WORKING)" ,"guiupdater" ) 
					}
					 transition(edgeName="t043",targetState="stopped",cond=whenDispatch("stopfan"))
				}	 
				state("stopped") { //this:State
					action { //it:State
						println("Fan stopped | FAN")
						emit("increase", "increase(V)" ) 
						delay(1000) 
						forward("updateGui", "fan(OFF)" ,"guiupdater" ) 
					}
					 transition(edgeName="t044",targetState="working",cond=whenDispatch("startfan"))
				}	 
			}
		}
}
