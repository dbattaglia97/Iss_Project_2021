/* Generated by AN DISI Unibo */ 
package it.unibo.sonarhandler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonarhandler ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var distance=2000
		    	var outdoorfree=true 
		return { //this:ActionBasciFsm
				state("s") { //this:State
					action { //it:State
						KBSupport.init() 
						println("SonarHandler INIT|SONAR")
					}
					 transition(edgeName="t01",targetState="start",cond=whenDispatch("startsonar"))
				}	 
				state("start") { //this:State
					action { //it:State
						delay(1000) 
					}
					 transition(edgeName="t02",targetState="handleSonarData",cond=whenEvent("sonaroutdoor"))
				}	 
				state("handleSonarData") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("distance(D)"), Term.createTerm("distance(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 distance = payloadArg(0).toInt()  
								println("distanceeeeee: $distance")
						}
						if (outdoorfree){ 
						if(distance <30 ) { 
						KBSupport.changeOutdoorToOccupied()
						                	outdoorfree=false 
						forward("updateGui", "outdoorStatus(BUSY)" ,"guiupdater" ) 
						forward("updateForTesting", "outdoorStatus(BUSY)" ,"testupdater" ) 
						forward("starttimer", "timer(ON)" ,"timer" ) 
						println("Car in Outdoor | SONAR")
						} 
						} else{  
						if(distance >=30 ) {
						            	outdoorfree=true
						                KBSupport.changeOutdoorToFree() 
						forward("updateGui", "outdoorStatus(FREE)" ,"guiupdater" ) 
						forward("stoptimer", "timer(OFF)" ,"timer" ) 
						forward("updateForTesting", "outdoorStatus(FREE)" ,"testupdater" ) 
						} 
						} 
					}
					 transition(edgeName="t03",targetState="handleSonarData",cond=whenEvent("sonaroutdoor"))
				}	 
			}
		}
}
