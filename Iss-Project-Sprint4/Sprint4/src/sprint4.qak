System carparking

 
//DECOMMENTARE se si usa il sonar fisico     
//mqttBroker "broker.hivemq.com" : 1883 eventTopic "parkingArea/feedback"     
 

Dispatch systemready:systemready(X)
Dispatch startManager: start(X)
Dispatch stopTrolley:stop(X)
Dispatch resumeTrolley:resume(X)
  
   
Request reqenter : reqenter(X)
Reply enter: enter(SLOTNUM)
Request carenter: carenter(SLOTNUM)
Reply receipt : receipt(TOKENID)
Request pickup : pickup(TOKENID)
Reply pickupaccepted: pickupaccepted(TOKENID)
Reply waitIndoor: waitIndoor(TOKENID)
Event caroutdoorarrival : coa(V)
Event carwithdrawn : cw(X)
Event carindoorarrival : cia(V)
Dispatch withdrawn:withdrawn(X)

Event sonaroutdoor:distance(D)
Event timeout 			: timeout(V)
Event weight		: weight(W)
Event alarm 			: timeout(alarm)
Dispatch weightcheck:wc(V)
Dispatch starttimer:timer(X)
Dispatch stoptimer:timer(X)
Dispatch startsonar:startsonar(X)
Dispatch startweightsensor:startweightsensor(X)

Dispatch updateForTesting: update(X)
Dispatch updateGui: value(X)

Dispatch startfan: startfan(V)
Dispatch stopfan : stopfan(V)
Dispatch startthermometer:startthermometer(X)
Event increase:increase(T)
Event decrease:decrease(T)
Event temperature:temperature(T)


Dispatch moveok	: move( MOVESHORT )
Request step	: step( TIME )
Reply   stepdone	: stepdone(V)
Reply   stepfail	: stepfail(DURATION, CAUSE)
Dispatch trolleycmd : trolleycmd(MOVETO)
Dispatch cmd       	: cmd(M)
Dispatch trolleyEnd : end(V)
Dispatch trolleystop :  trolleystop(V)
Dispatch trolleyresume :  trolleyresume(V)
Dispatch obstacle  : obstacle( ARG )
Dispatch end : end(e)
Event  endall	   : endall( ARG )
Event finishedPath:finishedPath(V)
 
Context ctxcarparking ip[host="localhost" port=5683]

CodedQActor testupdater	context ctxcarparking className "testUpdater"
CodedQActor guiupdater	context ctxcarparking className "guiUpdater"
CodedQActor outsonar	context ctxcarparking className "outSonar"
 
QActor client context ctxcarparking{ 
		State s0 initial{
		
		}Transition t0
			whenTime 5000 -> work
		
		State work{
			
		}
/*	[#
		var CLIENTDONE  = 0
		var SLOTNUM 	= 0 //slot assegnato
		var TOKENID 	= "0"
	#]
	State s0 initial{
		println("Client mock simulation START | CLIENT")
	} Transition t0
					whenTime 4000 -> requestToEnter  

	State init{
	}


	State requestToEnter{
		[# var t = kotlin.random.Random.nextLong(2000,4000) #]
		[# delay(t) #]
		println("client notify his interest in entering | CLIENT")
		request parkingmanagerservice -m reqenter : reqenter(client)
	} Transition t0
					whenReply waitIndoor -> noImmediatlyEntry
					whenReply enter -> cartoindoor


	State noImmediatlyEntry{
		[# CLIENTDONE = CLIENTDONE + 1 #]
		onMsg(enter : enter (SLOTNUM)){
			[# SLOTNUM = payloadArg(0).toInt() #]
			[#if(SLOTNUM==0){println("There are no free slots in the parking area | CLIENT")}#]
			[#else{println("Slotnum $SLOTNUM is free but the trolley is stopped or the indoor is occupied | CLIENT")}#]
			}
	} Goto stop if [# CLIENTDONE == 4 #] else requestToEnter


	State cartoindoor{
		onMsg(enter : enter (SLOTNUM)){
			[# SLOTNUM = payloadArg(0).toInt() #]
			if [# SLOTNUM > 0 #]{
				println("SLOTNUM = $SLOTNUM . Moving car to Indoor | CLIENT")
				request parkingmanagerservice -m carenter : carenter(V)
			}
		}
	}
	Transition t0			whenReply receipt -> afterreceipt


	State afterreceipt{
		onMsg(receipt : receipt (TOKENID)){
			[# TOKENID = payloadArg(0) #]
			updateResource [# "TOKENID" #]
			println("client's TOKENID is $TOKENID | CLIENT")
			[# var t1 = kotlin.random.Random.nextLong(3000, 6000)
			 delay(15000) #]
		}
	} Goto reqpickup

	State reqpickup{
		println("client notify his interest in picking his car | CLIENT")
		request parkingmanagerservice -m pickup : pickup($TOKENID)
	} Transition t0 whenReply pickupaccepted -> waitingForCar

	State waitingForCar{
	}Transition t0 whenEvent caroutdoorarrival -> pickupcar


	State pickupcar{
		delay 2000 //in 2 secondi porta via l'auto da OUTDOOR
		//emit carwithdrawn : cw(bye)
		[# CLIENTDONE = CLIENTDONE + 1 #]
	} Goto stop if [# CLIENTDONE == 4 #] else requestToEnter


	State stop{
		println("No more clients")
	}
*/
}

/*
QActor outsonar context ctxcarparking{
	State s0 initial{
	}Goto working

	State working{
		println("Sonar working")
	}Transition t0 whenEvent caroutdoorarrival -> distanceSimulationOccupied
	                whenEvent carwithdrawn -> distanceSimulationFreed

	State distanceSimulationOccupied{
		println("Emitting distance 15 -> car is in outdoor")
		emit sonaroutdoor:distance(15)
	}Goto working

	State distanceSimulationFreed{
		println("Emitting distance 50 -> car is NOT ANYMORE in outdoor")
		emit sonaroutdoor:distance(50)
	}Goto working
}
*/



QActor sonarhandler context ctxcarparking{
    [#var distance=2000
    	var outdoorfree=true#]

    State s initial{
        [#KBSupport.init()#]
        println("SonarHandler INIT|SONAR")
    }Transition t0 whenMsg startsonar->start

    State start{
        delay 1000
    }Transition t0 whenEvent sonaroutdoor ->handleSonarData

    State handleSonarData{
        onMsg(sonaroutdoor : distance(V)){
            [# distance = payloadArg(0).toInt() #]
            println("distanceeeeee: $distance")
        }
        [#if (outdoorfree){#]
            [#if(distance <30 ) {#]
                [#KBSupport.changeOutdoorToOccupied()
                	outdoorfree=false#]
                	forward guiupdater -m updateGui : outdoorStatus(BUSY)
                forward testupdater -m updateForTesting : outdoorStatus(BUSY)
                forward timer -m starttimer:timer(ON)
                println("Car in Outdoor | SONAR")
            [#}#]
        [#} else{ #]//outdoor occupata
            [#if(distance >=30 ) {
            	outdoorfree=true
                KBSupport.changeOutdoorToFree()#]
                forward guiupdater -m updateGui : outdoorStatus(FREE)
                forward timer -m stoptimer:timer(OFF)
                forward testupdater -m updateForTesting:outdoorStatus(FREE)
            [#}#]
        [#}#]
    }Transition t0 whenEvent sonaroutdoor ->handleSonarData
}


QActor timer context ctxcarparking{
    State s0 initial{

    }Goto working

    State working{
    }Transition t0 whenMsg starttimer -> startTimer

    State startTimer{
        println("Sonar startTimer")
        delay 2000
    }Transition t0 whenTime 20000->timeout
                    whenMsg stoptimer ->stopTimer
    State stopTimer{
        println("Sonar stopTimer")
        delay 1000
    }Goto working

    State timeout{
        println("Sonar timeout")
        [#forward("updateGui", "alarm(TIMEOUT)" ,"guiupdater" )#]
    }Goto working
}



QActor weightsensor context ctxcarparking{
	[#var P = 0#]
	State s0 initial{
		println("Weightsensor starts | WEIGHTSENSOR")
		forward guiupdater -m updateGui : weight($P)
	} Goto ready

	State ready{
		[#P = 0#]
		println("Weightsensor waiting | WEIGHTSENSOR")
	}Transition t0 whenEvent carindoorarrival -> simulate

	State simulate{
		println("Weight simulation | WEIGHTSENSOR")
		[# P =kotlin.random.Random.nextInt(500,4000) #]
		emit weight : weight($P)
		
	}Goto ready
}


QActor weightsensorhandler context ctxcarparking{
    [#var Www=1#]
    State s0 initial{
        println("WeightsensorHandler INIT | WEIGHTSENSORHANDLER")
				[#KBSupport.init()#]
    }Transition t0 whenMsg startweightsensor ->working

    State working{
        println("WeightsensorHandler START | WEIGHTSENSORHANDLER")
        delay 1000
    }Transition t0 whenEvent weight -> handleWeightData
 
    State handleWeightData{
        println("WeightsensorHandler handling weight | WEIGHTSENSORHANDLER")
        onMsg(weight : weight(W)){
            [# Www = payloadArg(0).toInt()
            println("Weight: " + Www)#]

            forward guiupdater -m updateGui : weight($Www)
            forward testupdater -m updateForTesting:weight($Www)
            
            [#if(Www>=500){#]
				[#KBSupport.changeIndoorToOccupied()#]
				[#forward("updateGui", "indoorStatus(BUSY)" ,"guiupdater" )
					forward("updateForTesting", "indoorStatus(BUSY)" ,"testupdater" )#
				]
                forward parkingmanagerservice -m weightcheck:wc(OK)
            [#}else{#]
                forward parkingmanagerservice -m weightcheck:wc(NOTOK)
            [#}#]
            
        }
    }Goto working
}


QActor parkingmanagerservice context ctxcarparking{
	[#
	lateinit var outsonarActor	: ActorBasic
	lateinit var testUpdaterActor	: ActorBasic
	lateinit var guiUpdaterActor	: ActorBasic
	var alreadythere=false
	var prog= 0
	var SLOTNUM=-1
	var CARSLOTNUM=-1
	var TOKENIN= -1
	var notAllowed=false
	var boolIN=false
	var boolOUT=false
	var weightCheck=""
	var location=""
	var outsonarSimulated=true
	#]

	State s0 initial{
		solve( consult("sysRules.pl"))
		solve( consult("parkingAreaKb.pl"))
		
		solve(outsonarSimulated)
		ifSolved{
			println("Outsonar simulato | SERVICE")
			[#outsonarActor= sysUtil.getActor("outsonar")!!
				outsonarSimulated=true#
			]
		}else{
			[#outsonarSimulated=false#]
			println("Outsonar reale | SERVICE")
		}
		
		[#guiUpdaterActor= sysUtil.getActor("guiupdater")!!
		testUpdaterActor= sysUtil.getActor("testupdater")!!#]
		
		
		
	}Transition t0 whenMsg startManager-> setup

 
	State setup{
		delay 2000
		forward trolley -m systemready:systemready(X)
		forward guiupdater -m updateGui : indoorStatus(FREE)
		forward guiupdater -m updateGui : outdoorStatus(FREE)
		forward guiupdater -m updateGui : fan(OFF)
		forward guiupdater -m updateGui : weight(0)
		[#forward("updateGui", "alarm(OFF)" ,"guiupdater" )#]
		
		forward testupdater -m updateForTesting: indoorAtStart(FREE)
		delay 100
		forward testupdater -m updateForTesting: outdoorAtStart(FREE)
		delay 100
		forward testupdater -m updateForTesting: posRobot(0,0)
		
		forward sonarhandler -m startsonar:sonar(ON)
		forward weightsensorhandler -m startweightsensor:sensor(ON)
		forward thermometer -m startthermometer : startthermometer(X)
		
		println("Park System START | SERVICE")
		
	}Transition t0 whenTime 1000-> checkAcceptIN

	State checkAcceptIN{
	    println("Checking if an AcceptIN can be elaborated| SERVICE")
	    solve(availableParking)
	    ifSolved{
	        [#boolIN=true#]
	    }else{
	        [#boolIN=false#]
	    }
	}Goto checkOutdoor if [#boolIN==true#] else checkOnlyOutdoor
 
	State checkOutdoor{
	    println("Checking if an AcceptOut can be elaborated| SERVICE")
	    solve(acceptOUT)
	    ifSolved{
	        [#boolOUT=true#]
	        
	    }else{
	        [#boolOUT=false#]
	    }
	}Goto allReady if [#boolOUT==true#] else indoorOnlyReady

	State checkOnlyOutdoor{
	    println("Checking if an AcceptOut can be elaborated| SERVICE")
    	solve(accetOUT)
    	ifSolved{
    	    [#boolOUT=true#]
    	}else{
    	    [#boolOUT=false#]
    	}
	}Goto outdoorOnlyReady if [#boolOUT==true#] else waiting

	State indoorOnlyReady{
	   println("The system can only elaborate AcceptIN request| SERVICE")
       [#boolOUT=false
        boolIN=false #]
	}Transition t0 whenTime 10000-> moveToHome
	                whenRequest reqenter-> acceptin

	State outdoorOnlyReady{
	   println("The system can only elaborate AcceptOUT request| SERVICE")
       [#boolOUT=false
        boolIN=false #]
	}Transition t0 whenTime 10000-> moveToHome
	                whenRequest pickup-> acceptout

	State waiting{
        println("The system can't elaborate any request| SERVICE")
	}	 Transition t0 whenTime 5000-> moveToHome
   
	State moveToHome{  
		[#notAllowed=false#]
	    [#if(!TrolleyPlannerSupport.alreadyThere(0)){#]
	    	println("Moving Trolley to HOME")
			forward trolley -m trolleycmd:trolleycmd(moveToHome)
			forward testupdater -m updateForTesting:movingTo(HOME)
			[#}#]
	}Transition t0 whenTime 3000-> checkAcceptIN


	State allReady{
        println("The system can elaborate AcceptIN and AcceptOut requests| SERVICE")
	}Transition t0 whenTime 10000->moveToHome
		whenRequest reqenter -> acceptin
	                whenRequest pickup -> acceptout


	State acceptin{
			println("The system is elaborating an AcceptIN request| SERVICE")
			solve(availableParking)
			ifSolved{
				solve(slotFree(S))
				[# SLOTNUM = getCurSol("S").toString().toInt()#]
			}else{
			    [#SLOTNUM=0#]
			} 
			solve(acceptIN)
			ifSolved{
			    forward testupdater -m updateForTesting: slotnum($SLOTNUM)
			    println("Reply to reqenter with $SLOTNUM  | SERVICE")
			    replyTo reqenter with enter : enter ($SLOTNUM)
			}else{
			    forward testupdater -m updateForTesting: waitIndoor($SLOTNUM)
			    [#notAllowed=true#]
          		println("Reply to reqenter with waitIndoor($SLOTNUM)  | SERVICE")
         		replyTo reqenter with enter : waitIndoor($SLOTNUM)
			}
	}Goto carenterCanBeAccepted if [#notAllowed==false#] else moveToHome

	State carenterCanBeAccepted{
		
	}Transition t0 whenRequest carenter ->carenter

	State carenter{
	    println("The system is elaborating a carenter request| SERVICE")
		[# prog++#]
		println("carindoorarrival emitted in order to be processed by  WEIGHT SENSOR   | SERVICE")
		emit carindoorarrival : cia(car_arrived)  //questo lo deve catturare il weightsensor
	} Transition t0
				whenMsg weightcheck -> weightCheck


	State weightCheck{
        println("The system is checking if there is a car in the indoorArea| SERVICE")
		onMsg(weightcheck : wc(V)){
			[#weightCheck = payloadArg(0).toString()#]
			println("Weight check: $weightCheck")
	 	}
	 	
	}Goto moveToIn if [#weightCheck.equals("OK")#] else weightNotOK

	State weightNotOK{
		println("There isn't a car in the indoor")
	}Goto moveToHome


	State moveToIn{
	    println("Trolley is moving to Indoor")
			forward trolley -m trolleycmd:trolleycmd(moveToIn)
	}Transition t0 whenEvent finishedPath->trolleyIsInIndoor

	State trolleyIsInIndoor{
		onMsg(finishedPath:finishedPath(V)){
			[#location = payloadArg(0).toString()
			location= location.substringAfter("(",location).substringBefore(")",location)
			println("Location: " + location + " || trolleyIsInIndoor")	
			forward("updateForTesting", "posRobot($location)" ,"testupdater" )
			#]
		}
	}Goto receipt
	

	State receipt{
		delay 1000
		solve(freedindoor)
		forward guiupdater -m updateGui : indoorStatus(FREE)
		forward testupdater -m updateForTesting : indoorStatus(FREE)
		forward guiupdater -m updateGui : weight(0)
		[# var TOKENID = "$prog$SLOTNUM"#]
		solve(addToken($TOKENID))
		/*==========[receipt]==========*/
		println("REPLY TO CARENTER WITH RECEIPT $TOKENID | SERVICE")
		replyTo carenter with receipt : receipt($TOKENID)
		forward testupdater -m updateForTesting: receipt($TOKENID)
	} Transition t0
					whenTime 1000 -> moveToSlotIn

	State moveToSlotIn{
		delay 1000
		println("SLOTNUM IS $SLOTNUM")
		solve(occupySlot($SLOTNUM))
		/*==========[moveToSlotIn]==========*/
		println("Trolley moves from entrance to slot $SLOTNUM | SERVICE")
		[#	var MOVETOSLOT = "moveToSlot".plus(SLOTNUM)#]
		forward trolley -m trolleycmd:trolleycmd($MOVETOSLOT)
	} Transition t0
			whenEvent finishedPath-> trolleyIsInSlot


    State trolleyIsInSlot{
        onMsg(finishedPath:finishedPath(V)){
            [#location = payloadArg(0).toString()
            location= location.substringAfter("(",location).substringBefore(")",location)
            println("Location: " + location + " || trolleyIsInSlot")	
            forward("updateForTesting", "posRobot($location)" ,"testupdater" )
            #]
        }
    }Goto checkAcceptIN


	State acceptout{
	    onMsg (pickup : pickup(TOKENIN)){
	        [# TOKENIN = payloadArg(0).toInt() #]
	        println("Token provided by the customer for the pickup $TOKENIN | SERVICE")
	        solve(token($TOKENIN))
            ifSolved{
                replyTo pickup with pickupaccepted: pickupaccepted($TOKENIN)
                [#CARSLOTNUM= TOKENIN%10#]
                println("Token elaboration OK, token= $TOKENIN and corresponding slot= $CARSLOTNUM| SERVICE")
                forward testupdater -m updateForTesting : carslotnum($CARSLOTNUM)
            }else{
                replyTo pickup with pickupaccepted: pickupaccepted($TOKENIN)
                [#TOKENIN=-1#]
                println("TOKEN NOT OK | SERVICE")
				forward testupdater -m updateForTesting : pickupNotAccepted($TOKENIN)
	    	}
	    }
	}Goto checkAlreadyInSlot if [#TOKENIN>0#] else tokenError

	State tokenError{
	    println("TOKEN ERROR | SERVICE")
	}Goto checkAcceptIN
 
    
	State checkAlreadyInSlot{
		[#alreadythere=TrolleyPlannerSupport.alreadyThere(SLOTNUM)#]
	}Goto picking if [#alreadythere==true#] else goToSlot
 
	State goToSlot{
		println("Trolley moves to slot $SLOTNUM | SERVICE")
		[#	var MOVETOSLOT = "moveToSlot".plus(SLOTNUM)#]
		forward trolley -m trolleycmd:trolleycmd($MOVETOSLOT)
	}Transition t0 	whenEvent finishedPath-> picking
	 
	State picking{
		onMsg(finishedPath:finishedPath(V)){
			[#location = payloadArg(0).toString()
			location= location.substringAfter("(",location).substringBefore(")",location)
			println("Location: " + location )
			forward("updateForTesting", "posRobot($location)" ,"testupdater" )
		#]
			
		}
		println("Trolley is picking a car | SERVICE")
		println("Trolley picking car from slot $CARSLOTNUM result from $TOKENIN % 10 | SERVICE")
		solve(liberaSlot($CARSLOTNUM))
		solve(removeToken($TOKENIN))
	}Goto moveToOut


	State moveToOut{
		forward trolley -m trolleycmd : trolleycmd(moveToOut)
	} Transition t0 whenEvent finishedPath-> trolleyIsInOutdoor


	State trolleyIsInOutdoor{
		onMsg(finishedPath:finishedPath(V)){
			[#location = payloadArg(0).toString()
			location= location.substringAfter("(",location).substringBefore(")",location)
			println("Location: " + location + " || trolleyIsInOutdoor")
			forward("updateForTesting", "posRobot($location)" ,"testupdater" )
		#]
		}
		println("Car is in Outdoor area | SERVICE")
		[#if(outsonarSimulated){#]
			emit caroutdoorarrival : coa(car_outdoor)
			delay 2000
			emit carwithdrawn:cw(bye)
		[#}#]
		 //deve essere percepito dal sensore
	}Transition t0 whenTime 2000 -> checkAcceptIN
				

}

QActor trolley context ctxcarparking{
[#  val mapname     = "parkingMap0"
  var Myself      = myself
  var CurrentPlannedMove = ""
  var MOVE = ""
  var terminate =  0
  var home = 0
  var counter = 0
  var trolleyCmd = ""
  var listCommand = arrayListOf<String>()
	var ActualPosition=""

#]
	State s0 initial{
		println ("trolley | start ")
		[#TrolleyPlannerSupport.initPlanner("$mapname")
		KBSupport.init() #]

	}Transition t0 whenMsg systemready -> idle

	State idle{
		println("trolley [idle]  | waiting......... ")
		forward guiupdater -m updateGui : status(IDLE)  //GUI
		[#KBSupport.changeTrolleyStatusToIdle() #]
	}	Transition t1  	 whenMsg     trolleycmd  -> working
		whenMsg trolleystop ->stopped
 
	State working{
		println("trolley [working] | TROLLEY")
		[#home = 0
		KBSupport.changeTrolleyStatusToWorking() #]
		forward guiupdater -m updateGui : status(WORKING) 
		//forward testupdater -m updateForTesting:trolley(WORKING)
		onMsg( trolleycmd : trolleycmd(V) ){
			[#	trolleyCmd = "${payloadArg(0)}"
				TrolleyPlannerSupport.setGoal(trolleyCmd)
				if(trolleyCmd == "moveToHome"){
					home =  1
				}
				if(trolleyCmd == "end"){
					terminate =  1
				}
			#]
		}
	}

	Goto execPlannedMoves

  	State execPlannedMoves{
  		delay 400
 		[#CurrentPlannedMove = TrolleyPlannerSupport.getNextMove() #]
	}
	Goto doMove if [# CurrentPlannedMove.length>0  #] else finishPlannedMoves

	State doMove{
		forward basicrobot -m cmd : cmd($CurrentPlannedMove)
  	}Transition t1   whenTime 100 -> execPlannedMoves
 					whenMsg  trolleycmd  and [#home == 1 && terminate == 0#]-> working
 					whenMsg  trolleystop -> stopped

	State stopped{
		[#KBSupport.changeTrolleyStatusToStopped()#]
		println("trolley stopped | TROLLEY")
		delay 500
		forward basicrobot -m cmd:cmd(h)
		forward guiupdater -m updateGui : status(STOPPED) 
		//forward testupdater -m updateForTesting:trolley(STOPPED)
	}Transition t0 whenMsg trolleyresume ->resuming

	State resuming{
		[#if (KBSupport.previousTrolleyStatus.equals(TrolleyStatus.WORKING)){
				KBSupport.changeTrolleyStatusToWorking()
				println("Trolley RESUMING and previously was working | TROLLEY")
				//forward("updateForTesting", "trolley(WORKING)" ,"testupdater" )
				#]forward guiupdater -m updateGui : status(WORKING)[#
			}
		#]
	}Goto idle if [#KBSupport.previousTrolleyStatus.equals(TrolleyStatus.IDLE)#] else execPlannedMoves


 	State finishPlannedMoves{
 		println("trolley | finishPlannedMoves")

 		[#if(home == 1 || terminate == 1){

 			listCommand =  TrolleyPlannerSupport.atHome()
			for (command in listCommand) {
   				forward("cmd", "cmd(${command})" ,"basicrobot" )
			}
		}else{
			listCommand =  TrolleyPlannerSupport.loadUnloadCar()
			for (command in listCommand) {
   				forward("cmd", "cmd(${command})" ,"basicrobot" )
			}
				delay(1000)//we want to simulate load/unload the car
		}#]
		[# ActualPosition=TrolleyPlannerSupport.getPosition().toString()
			if(KBSupport.trolleyStatus.equals(TrolleyStatus.WORKING)){
				println("EMITTING FINISHEDPATH | TROLLEY")
				emit("finishedPath", "finishedPath($ActualPosition)" )
			} #]
 	}
	Goto endWork if [# terminate == 1  #] else idle
 
	State endWork{
		println("trolley |  endWork")
		forward basicrobot -m end : end(V)
	}
}

QActor basicrobot context ctxcarparking{
[#  
  var StepTime      = 0L 
  var StartTime     = 0L     
  var Duration      = 0L  
  var RobotType     = "" 
  var CurrentMove   = "moveUnknown"
#]     
	State s0 initial {     
		println("basicrobot | START")	 
 		//[# sysUtil.trace = true #]		//Equivalent to the -trace flag
 		 
 		//[# sysUtil.waitUser("hello", 3000) #]
 		qrun unibo.robot.robotSupport.create(myself,"basicrobotConfig.json")
 		/* 
 		[# RobotType = unibo.robot.robotSupport.robotKind #]
        if[# RobotType != "virtual" #]{
	 		println("basicrobot | type=$RobotType attempts to activate the sonar pipe")	
	 		[#  //For real robots
				//delay( 1500 ) //give to the realsonar the time to start
	 			var robotsonar = context!!.hasActor("realsonar")  
	 			if( robotsonar != null ){ 
	 				println("basicrobot | WORKING WITH SONARS") 
	 				//ACTIVATE THE DATA SOURCE realsonar
	 				forward("sonarstart", "sonarstart(1)" ,"realsonar" ) 				
	 				//SET THE PIPE  
	 				robotsonar.
	 				subscribeLocalActor("datacleaner").
	 				subscribeLocalActor("distancefilter").
	 				subscribeLocalActor("basicrobot")		//in order to perceive obstacle
	 			}else{
	 				println("basicrobot | WARNING: realsonar NOT FOUND")
	 			}
	 		#]  
	 		
 		} 
		else{ //virtual
			[#  var robotsonar = context!!.hasActor("robotsonar") 
	 			if( robotsonar != null ){ 
	 				println("basicrobot | WORKING WITH VIRTUAL SONAR") 
	 				//ACTIVATE THE DATA SOURCE realsonar
	 				forward("sonarstart", "sonarstart(1)" ,"robotsonar" ) 				
	 				//WE DO NOT SET THE PIPE, since we don't have sonar data  to clean
	 			
	 				//robotsonar.
	 				//subscribeLocalActor("datacleaner").
	 				//subscribeLocalActor("distancefilter").
	 				//subscribeLocalActor("basicrobot")		
	 			}else{
	 				println("basicrobot | WARNING: robotsonar NOT FOUND")
	 			}
 
 			#] 
 		}*/
 		
	//	updateResource [# "basicrobot(start)" #]
 
		discardMsg Off  //WE want receive any msg 
	} 
	
	Goto work
	 
	State work{  
		println("basicrobot  | waiting .................. ")  
		
	}
	Transition t1   whenMsg    	cmd		-> exec
					whenRequest step	-> doStep			
					whenMsg		obstacle	-> handleObstacle  //in virtualrobot caused by the move w/s
				  	whenMsg    	end	-> endwork			   
	State exec{ 
		printCurrentMessage
		onMsg( cmd : cmd(MOVE) ){ 
  			//activate the motors  
			[# CurrentMove =  "${payloadArg(0)}" #] 
			//println("CurrentMove = $CurrentMove")
		 	if [# CurrentMove == "w" #] {
				//delay 1000
				run unibo.robot.robotSupport.move( "w" ) 
				delay 400
				run unibo.robot.robotSupport.move( "h" )
			}else{
				run unibo.robot.robotSupport.move( "${payloadArg(0)}" )
				
				
			}
			if [# CurrentMove != "h" #] { 
				//updateResource [# "$CurrentMove" #]
			}
		}
	 }  
	 
	Goto work       
	        
	State handleObstacle{   
	    run unibo.robot.robotSupport.move( "h" )
		println("basicrobot | handleObstacle CurrentMove=$CurrentMove")	
		//printCurrentMessage
			//msg(obstacle,dispatch,distancefilter,basicrobot,obstacle(5),18)
		if[# CurrentMove == "w" #]{
 			
			  // collision Json      : emitted by the virtualrobot 
			  // obstacle(virtual)   : emitted by the virtualrobotSupport2021 when endmove=false
			  // obstacle(5)         : emitted by the distanceFilter
			  // obstacle(w)         : emitted by the basicrobot
			 
			//updateResource [# "obstacle(w)" #]
			//delay 300
			
			//println("COMPENSATEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE")
			run unibo.robot.robotSupport.move( "s" ) 
			delay 100 //loose the control ...
			run unibo.robot.robotSupport.move( "h" ) 
		
			//delay 1000	//give time
 		 
		} 	
	}
	Goto work

	
   	State doStep{ 
 		printCurrentMessage  
		onMsg( step : step( T ) ){  
			[#	StepTime = payloadArg(0).toLong() 	#]  
			//updateResource [# "step(${StepTime})" #]
  		}  
        memoCurrentTime StartTime  
        //println("basicrobot | doStep StepTime =$StepTime ")        
        run unibo.robot.robotSupport.move( "w" )  //moves a real robot forever
        
	}  
	Transition t0 	whenTimeVar StepTime  -> stepDone //stepPerhapsDone	//caused by p
					whenMsg  obstacle     -> stepFail		
        //whenMsg     cmd       -> execcmd
  	 
	State stepDone{   
 		run unibo.robot.robotSupport.move( "h" )  //stop the real robot already done
		//println("basicrobot | stepDone")
		updateResource [# "stepDone($StepTime)" #]
   		//emit info : info( stepdone($StepTime) )
   		replyTo step with stepdone : stepdone(ok)
		//println("basicrobot | stepDone reply done")
  	}
	Goto work  
 
	State stepFail{  		    
		setDuration Duration from StartTime
		run unibo.robot.robotSupport.move( "h" )  //stop the (real) robot
		[# var TunedDuration = Duration;  
			TunedDuration = Duration * 5 / 6
		#]
		println("basicrobot | stepFail duration=$Duration TunedDuration=$TunedDuration")
			run unibo.robot.robotSupport.move( "s" )
			delayVar TunedDuration 
			run unibo.robot.robotSupport.move( "h" ) 
 		updateResource [# "stepFail($Duration)" #] 
 		//emit info : info( stepFail($Duration) )
 		replyTo step with stepfail : stepfail($Duration, obst)
    }
	Goto work
	
	State endwork{ 
		println("basicrobot | endwork")
		onMsg( end : end( V ) ){ 
			println("basicrobot | endwork")
			updateResource [# "basicrobot(end)" #]	 		
		}
 		emit endall : endall(normal) 
 		terminate 1
	}
	       
 }
 
 	
QActor fan context ctxcarparking{
	State s0 initial{
		println("fan | start")
	}Transition t0 whenMsg startfan -> working

	State working{
		println("Fan working | FAN")
		emit decrease:decrease(V)
		delay 1000
		forward guiupdater -m updateGui : fan(WORKING)
	}Transition t0 whenMsg stopfan ->stopped

	State stopped{
		println("Fan stopped | FAN")
		emit increase:increase(V)
		delay 1000
		forward guiupdater -m updateGui : fan(OFF)
	}Transition t0 whenMsg startfan ->working
}

QActor thermometer context ctxcarparking{
	[#var Temp=20#]
	State s0 initial{
		println("thermometer | starting ")
	}Transition t0 whenMsg startthermometer ->increasing
  
	State increasing{
		println("temperature increasing, actual temperature: $Temp| THERMOMETER")
		delay 6000
		[#Temp=Temp+5#]
		[#forward("updateGui", "temp($Temp)" ,"guiupdater" )#]
		delay 3000
		emit temperature:temperature($Temp)
	}Transition t0 whenTime 100->increasing
		whenEvent decrease -> decreasing
     
	State decreasing{
		println("temperature decreasing, actual temperature: $Temp| THERMOMETER")
		delay 3000
		[#Temp=Temp-5#]
		delay 3000
		[#forward("updateGui", "temp($Temp)" ,"guiupdater" )#]
		emit temperature:temperature($Temp)
	}Transition t0 whenTime 100->decreasing
		whenEvent increase -> increasing
}
   
QActor fanautomatizer context ctxcarparking{
	[#var fanIsStarted=0
	var minTemp=20
	var maxTemp=45#]
     
	State s0 initial{
		println("fanautomatizer | start")
		
	}Goto monitoring
  
	State monitoring{
		println("fanautomatizer monitoring the situation | fanautomatizer")
	} Transition t0 whenEvent temperature -> handleTemp
      
	State handleTemp{   
		onMsg(temperature : temperature (T)){
			[# var temp=payloadArg(0).toInt()
			if(  temp >= maxTemp  && fanIsStarted == 0){
					println("fanautomatizer [handleTemp]: send start command to fan  | fanautomatizer")
					forward("startfan", "startfan(on)" ,"fan" )
					fanIsStarted = 1
			}
			if(temp <= minTemp  && fanIsStarted == 1 ){
				println("fanautomatizer [handleTemp]: send stop command to fan | fanautomatizer")
				forward("stopfan", "stopfan(off)" ,"fan" )
				fanIsStarted = 0
				}	 #]
		}
	} Transition t0 whenEvent temperature -> handleTemp
}

QActor trolleystopper context ctxcarparking{
	
	State s0 initial {
	}Goto work
	 
	State work{
	}Transition t0 whenMsg stopTrolley -> stopped
			
	State stopped{
		forward trolley -m trolleystop : trolleystop(manager)
	} Transition t0
		whenMsg resumeTrolley -> resumed
		
    State resumed{
    	forward trolley -m trolleyresume : trolleyresume(manager)
    }Goto work
 }