/* Generated by AN DISI Unibo */ 
package it.unibo.parkingmanager

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkingmanager ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var fanIsStarted=0
			var minTemp=20
			var maxTemp=36 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("parkingManager | start")
					}
					 transition( edgeName="goto",targetState="monitoring", cond=doswitch() )
				}	 
				state("monitoring") { //this:State
					action { //it:State
						println("parkingManager monitoring the situation | PARKINGMANAGER")
					}
					 transition(edgeName="t053",targetState="handleTemp",cond=whenEvent("temperature"))
				}	 
				state("handleTemp") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("temperature(T)"), Term.createTerm("temperature(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var temp=payloadArg(0).toInt()
											if(  temp > maxTemp  && fanIsStarted == 0){
													println("parkingManager [handleTemp]: send start command to fan  | PARKINGMANAGER")
													forward("startfan", "startfan(on)" ,"fan" )
													fanIsStarted = 1
													forward("trolleystop", "trolleystop(OK)" ,"trolley" )
											}
											if(temp <= minTemp  && fanIsStarted == 1 ){
												println("parkingManager [handleTemp]: send stop command to fan | PARKINGMANAGER")
												forward("stopfan", "stopfan(off)" ,"fan" )
												fanIsStarted = 0
												forward("trolleyresume", "trolleyresume(OK)" ,"trolley" )
												}	  
						}
					}
					 transition(edgeName="t054",targetState="handleTemp",cond=whenEvent("temperature"))
				}	 
			}
		}
}
